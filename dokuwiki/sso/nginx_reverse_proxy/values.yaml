containerPorts:
    https: 8081
service:
    type: ClusterIP
serverBlock: |-
  server {
    listen 8081;
    listen [::]:8081;
    server_name <host>;

    error_page 401 403 = @login_required;

    # define nginx caching flags
    set $bypass_cache 0;
    set $no_cache 0;
    set $skip_reason "None";
    set $purge_cache "None";
    set $purge_reason "None";

    # Anyone with the link can access this. Bypasses /auth/.
    # Proxy pass all embedded requests.
    # add_header Alows iframe embedding.
    # regex compatible location routing
    location ~ ^/[0-9a-z-]+/ {
      proxy_pass http://<service>:<PORT>$request_uri;
      proxy_set_header Host $host;
      proxy_set_header X-Original-URI $request_uri;
      add_header Content-Security-Policy "frame-src 'self' <URL>;";
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Uri /rule;
      proxy_read_timeout 300s;
      proxy_connect_timeout 75s;
    }

    # anyone with IDIR identity can access this
    # API
    location /api/ {
      auth_request /auth/;
      auth_request_set $auth_status $upstream_status;
      proxy_set_header Host $host;
      proxy_set_header X-Original-URI $request_uri;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_read_timeout 300s;
      proxy_connect_timeout 75s;
      proxy_pass http://<service>:<PORT>/;
    }

    # anyone with IDIR identity can access this
    # Root URL
    location / {
      auth_request /auth/;
      auth_request_set $auth_status $upstream_status;
      proxy_set_header Host $host;
      proxy_set_header X-Original-URI $request_uri;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_read_timeout 300s;
      proxy_connect_timeout 75s;
      proxy_pass http://<service>/;
    }

    # authenticate/authorize user
    location /auth/ {
        internal;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header Host $http_host;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;
        proxy_pass http://sso-client-node/;
      }

      location /sso-login {
        proxy_set_header Host $host;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass http://sso-client-node/authn;
      }

      location /sso {
        proxy_set_header Host $host;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass http://sso-client-node/authn/callback;
      }

      location @login_required {
        return 302 https://<hostURL>/sso-login?relay=$request_uri;
      }
  }