import sys
parent_dir = ".."
sys.path.append(parent_dir)
sys.path.append(r"E:\ETL_V8\sdpr-cdw-data-pipelines\chefs-forms\hr-data-usage-agreement") # this is developer-specific
from src.chefs_api import ChefsApi
import unittest
import yaml

# get config values
with open('chefs-forms\hr-data-usage-agreement\config.yml', 'r') as f:
    config = yaml.load(f, Loader=yaml.SafeLoader)
    api_key_secret = config['api-secret']
    form_id = config['form-id']
    form_version_id = config['form-version-id']

# initialize ChefsApi with config values
chefs_api = ChefsApi(
    api_key_secret=api_key_secret, 
    form_id=form_id, 
    form_version_id=form_version_id
)

class TestChefsApi(unittest.TestCase):

    def test_submissions_endpoint_status(self):
        resp = chefs_api.get(chefs_api.submissions_endpoint)
        status_code = resp.status_code
        self.assertEqual(200, status_code)

    def test_submissions_endpoint_fields(self):
        submissions = chefs_api.get_json(chefs_api.submissions_endpoint)
        for submission in submissions:
            # keys = submission.keys()
            sub = submission.get('submission')
            # submissions_keys = s.keys()
            s = sub.get('data')
            # s_keys = s.keys()
            # print(s_keys)

            date = s.get('date')
            submit = s.get('submit')
            editGrid1 = s.get('editGrid1')
            lateEntry = s.get('lateEntry')
            simpleemail = s.get('simpleemail')
            positionTitle1 = s.get('positionTitle1')
            supervisorsName = s.get('supervisorsName')
            durationOfAccess = s.get('durationOfAccess')
            simplesignatureadvanced = s.get('simplesignatureadvanced')
            provideClearRationaleForAccess2 = s.get('provideClearRationaleForAccess2')
            pleaseUploadTheUsersSignedAgreement = s.get('pleaseUploadTheUsersSignedAgreement')
            enterDataRelatedToAnyOfTheFollowingDomains = s.get('enterDataRelatedToAnyOfTheFollowingDomains')
            ifOtherPleaseProvideDetailsBelow = s.get('ifOtherPleaseProvideDetailsBelow')
            ifThisIsTemporaryPleaseProvideTheAccessEndDate = s.get('ifThisIsTemporaryPleaseProvideTheAccessEndDate')
            requires_other_data = enterDataRelatedToAnyOfTheFollowingDomains.get('other')
            requires_fte_data = enterDataRelatedToAnyOfTheFollowingDomains.get('fteData')
            requires_stiip_data = enterDataRelatedToAnyOfTheFollowingDomains.get('stiipData')
            requires_time_leave_data = enterDataRelatedToAnyOfTheFollowingDomains.get('timeLeave')
            requires_employee_data = enterDataRelatedToAnyOfTheFollowingDomains.get('employeeData')
            requires_pay_cost_earnings_data = enterDataRelatedToAnyOfTheFollowingDomains.get('payCostEarnings')
            requires_employee_movement_data = enterDataRelatedToAnyOfTheFollowingDomains.get('employeeMovement')
            requires_org_heirarchy_data = enterDataRelatedToAnyOfTheFollowingDomains.get('organizationalHierarchy')

            for user in editGrid1:
                idir = user.get('idir')
                branch = user.get('branch')
                nameOfUser = user.get('nameOfUser')
                positionTitle = user.get('positionTitle')
                positionTitle2 = user.get('positionTitle2')
                simpleemailadvanced = user.get('simpleemailadvanced')

                print(nameOfUser)
                print(requires_fte_data)
                print(requires_stiip_data)
                print(requires_time_leave_data)
                print(requires_employee_data)
                print(requires_pay_cost_earnings_data)
                print(requires_employee_movement_data)
                print(requires_org_heirarchy_data)
                print(requires_other_data)
                print(ifOtherPleaseProvideDetailsBelow)
                print(durationOfAccess)
                print(ifThisIsTemporaryPleaseProvideTheAccessEndDate)
                print(provideClearRationaleForAccess2)

                print(date)
                print(idir)
                print(positionTitle)
                print(branch)
                print(positionTitle2)
                print(simpleemailadvanced)
                print(supervisorsName)
                print(positionTitle1)
                print(simpleemail)
                print('------------------------------------------')
        

    def test_status_codes_endpoint(self):
        resp = chefs_api.get(chefs_api.status_codes_endpoint)
        status_code = resp.status_code
        self.assertEqual(200, status_code)

    def test_get_current_status(self):
        submissions = chefs_api.get_json(chefs_api.submissions_endpoint)
        a_submission_id = submissions[0]['id']
        a_status = chefs_api.get_current_status(a_submission_id)
        self.assertTrue(a_status in ['SUBMITTED', 'ASSIGNED', 'COMPLETED'])

    def test_get_published_version_endpoint(self):
        published_version = chefs_api.get_json(chefs_api.published_version_endpoint)
        actual_id = published_version['id']
        expected_id = form_id
        self.assertEqual(expected_id, actual_id)

    def test_get_fields_endpoint(self):
        fields = chefs_api.get_json(chefs_api.fields_endpoint)
        print(fields)
        # self.assertEqual(expected_id, actual_id)

if __name__ == '__main__':
    unittest.main()